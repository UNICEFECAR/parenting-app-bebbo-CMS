<?php

/**
 * @file
 * It contains custom field module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function pb_custom_form_theme($existing, $type, $theme, $path) {
  $config = \Drupal::config('pb_custom_form.mobile_app_share_link_form');

  return [
    'pb-mobile' => [
      'variables' => ['app_share_script' => $config->get('mobile_app_share_link')],
    ],
    'kosovo-mobile' => [
    'variables' => ['kosovo_app_share_script' => $config->get('kosovo_mobile_app_share_link')],
  ]
  ];
}

/**
 * Implements hook_form_alter().
 */
function pb_custom_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {  
  // Adding custom validation for the welcome page type field.
  if ($form_id == 'group_country_edit_form') {
    ##Make readonly if offload country is enabled
    $user = \Drupal::currentUser();
    $roles = $user->getRoles();    
    $global_user = ['global_admin'];
    if (count(array_intersect($roles, $global_user)) != 0) {
      if ($form['field_make_available_for_mobile']['widget']['value']['#default_value'] == 1) {
        $form['field_make_available_for_mobile']['widget']['value']['#disabled'] = 'true';
      }
      else{
            $form['field_make_available_for_mobile']['widget']['value']['#default_value'] = 'true';
          }
    }      
    /* $form['#attached']['js'][] = drupal_get_path('module', 'pb_custom_field') . '/js/homepage.js'; */
    $form['#attached']['library'][] = 'pb_custom_field/mylib';
    $form['actions']['submit']['#submit'][] = 'group_country_save';

  }
}

/**
 * Implements hook_example().
 */
function group_country_save($form, FormStateInterface $form_state) {
  $field_make_available_for_mobiles = $form_state->getValue('field_make_available_for_mobile');
  $field_make_available_for_mobile = $field_make_available_for_mobiles['value'];
  if ($field_make_available_for_mobile == 1) {
    $country_language = $form_state->getValue('field_language');
    if (!empty($country_language)) {
      foreach ($country_language as $value) {
        $country_languages_arry[] = $value['value'];
      }
    }
    $resultss = db_select('node_field_data', 't')
      ->fields('t')
      ->condition('langcode', $country_languages_arry, 'IN')
      ->execute()
      ->fetchAll();
    if (!empty($resultss)) {
      foreach ($resultss as $val) {
        $langcode = $val->langcode;
        $nid = $val->nid;
        $nids[$langcode] = $val->nid;
        $langcodess[$nid][] = $val->langcode;
      }
    }
    $batch = [
      'title' => t('change status'),
      'operations' => [
      [
        '\Drupal\pb_custom_form\ChangeNodeStatus::offLoadCountryProcess',
        [$langcodess],
      ],
      ],
      'finished' => '\Drupal\pb_custom_form\ChangeNodeStatus::offLoadCountryProcessFinishedCallback',
    ];
    batch_set($batch);

  }

}

/**
 * Implements hook_preprocess_HOOK() for views_view_field.html.twig
 */

function pb_custom_field_preprocess_views_view_field(&$variables){
  if( $variables['field']->field == 'revision_uid'){
    $langcode = $variables['row']->node_field_data_langcode;
    $nid = $variables['row']->_entity->nid->value;
    $vid = \Drupal::entityTypeManager()->getStorage('node')->getLatestRevisionId($nid);
    $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
    if ($node instanceof NodeInterface) {
      $storage = \Drupal::entityTypeManager()->getStorage($node->getEntityTypeId());
      $revision_id = $storage->getLatestTranslationAffectedRevisionId($node->id(), $langcode);
      $revisionNode = $storage->loadRevision($revision_id);
      $revisionTransNode = $revisionNode->getTranslation($langcode);
      $uid = $revisionTransNode->revision_uid->target_id;
      $objUser = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
      $variables['output'] = $objUser->name->value;
    }
  }
}

/**
 * Implmenting hook_views_post_execute() to optimize performance of api,
 * Implmenting this hook to avoid duplicate entry of nodes in view.
 */
function pb_custom_form_views_post_execute(ViewExecutable $view) {
  // for chil growth api

  if ($view->id() == 'articles'){
    $display_name = $view->getDisplay()->display['id'];
    switch ($display_name) {
      case 'rest_export_18': // Child Growth Pinned Content API
      case 'rest_export_20':  // Milestone Related Content API
        $arrNids = [];
        $new_result = [];
        foreach($view->result as $k => $row) {
          $id = $row->node_field_data_node__field_related_articles_nid;
          if (!in_array($id, $arrNids)) {
            $arrNids[] = $id;
            $new_result[] = $row;
          }
        }
        $view->result = $new_result;
        break;

      case 'rest_export_17':    // Health Check-Ups Pinned Content API
      case 'rest_export_1':     // FAQ Pinned Content API  // api/pinned-contents/en/faq
      case 'rest_export_21':    // FAQ Updated Pinned Content API   // api/updated-pinned-contents/en/faq
        $arrNids = [];
        $new_result = [];
        foreach($view->result as $k => $row) {
          $id = $row->node_field_data_node__field_pinned_article_nid;
          if (!in_array($id, $arrNids)) {
            $arrNids[] = $id;
            $new_result[] = $row;
          }
        }
        $view->result = $new_result;
        break;

      case 'rest_export_16': // Child Development Girl Pinned Content API  // api/pinned-contents/en/child_development/41
        $arrNids = [];
        $new_result = [];
        foreach($view->result as $k => $row) {
          $id = $row->node_field_data_node__field_pinned_article_for_girl_nid;
          if (!in_array($id, $arrNids)) {
            $arrNids[] = $id;
            $new_result[] = $row;
          }
        }
        $view->result = $new_result;
        break;
     
        case 'rest_export_12': //Vaccinations Pinned Content API
          // not able to test this as the data is empty
          break;

        case 'rest_export_19': // Child Development Boy Pinned Content API  // api/pinned-contents/en/child_development/40
          $arrNids = [];
          $new_result = [];
          foreach($view->result as $k => $row) {
            $id = $row->node_field_data_node__field_pinned_article_for_boy_nid;
            if (!in_array($id, $arrNids)) {
              $arrNids[] = $id;
              $new_result[] = $row;
            }
          }
          $view->result = $new_result;
          break;

       // case 'rest_export_2': // Article API
      default:
    }
  }
}