<?php

/**
 * @file
 * To add custom field in language configuration form.
 *
 * @file
 * @file
 * .*/

use Drupal\Component\Utility\Xss;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\NodeInterface;

/**
 * hook_form_alter.
 */
function language_custom_field_form_alter(&$form, &$form_state, $form_id) {
  // Check if the form ID is  language_admin_edit_form.
  if ($form_id == 'language_admin_edit_form') {
    // Change the weight of the direction field.
    $form['direction']['#weight'] = 10;
    // Add custom field to the form.
    $langcode = '';
    // If we are editing, we should have a langcode.
    if ($form_id == 'language_admin_edit_form' && isset($form['langcode']['#value'])) {
      $langcode = $form['langcode']['#value'];
    }
    // Load existing data for the given langcode from the database.
    $existing_data = [];
    if (!empty($langcode)) {
      $existing_data = \Drupal::database()->select('custom_language_data', 'cld')
        ->fields('cld', ['custom_locale', 'custom_luxon', 'custom_plural', 'custom_language_name_local'])
        ->condition('langcode', $langcode)
        ->execute()
        ->fetchAssoc();
    }
    $form['custom_language_name_local'] = [
      '#type' => 'textfield',
      '#title' => t('Language name in local'),
      '#description' => t('Display name of the language in the app'),
      '#default_value' => $existing_data['custom_language_name_local'] ?? '',
    ];
    $form['custom_locale'] = [
      '#type' => 'textfield',
      '#title' => t('locale'),
      '#description' => t('Enter locale data.'),
      '#default_value' => $existing_data['custom_locale'] ?? '',
    ];
    $form['custom_luxon'] = [
      '#type' => 'textfield',
      '#title' => t('luxonLocale'),
      '#description' => t('Enter luxonLocale data.'),
      '#default_value' => $existing_data['custom_luxon'] ?? '',
    ];
    $form['custom_plural'] = [
      '#type' => 'textfield',
      '#title' => t('pluralShow'),
      '#description' => t('Enter pluralShow data.'),
      '#default_value' => $existing_data['custom_plural'] ?? '',
    ];
    $form['actions']['submit']['#submit'][] = 'language_custom_field_custom_submit';
  }
}

/**
 * Sumbit handler.
 */
function language_custom_field_custom_submit($form, &$form_state) {
  $field_custom_locale = $field_custom_luxon = $field_custom_plural = $langcode = $custom_language_name_local = '';
  // Get the value of the custom field.
  if ($form_state->getValue('custom_locale')) {
    $field_custom_locale = $form_state->getValue('custom_locale');
  }

  if ($form_state->getValue('custom_luxon')) {
    $field_custom_luxon = $form_state->getValue('custom_luxon');
  }

  if ($form_state->getValue('custom_plural')) {
    $field_custom_plural = $form_state->getValue('custom_plural');
  }

  if ($form_state->getValue('langcode')) {
    $langcode = $form_state->getValue('langcode');
  }

  if ($form_state->getValue('custom_language_name_local')) {
    $custom_language_name_local = $form_state->getValue('custom_language_name_local');
  }

  $current_timestamp = time();
  if (!empty($langcode)) {
    // Check if a record already exists for this langcode.
    $existing_record = \Drupal::database()->select('custom_language_data', 'cld')->fields('cld', ['langcode'])->condition('langcode', $langcode)->execute()->fetchField();
    if ($existing_record) {
      // Update the existing record.
      \Drupal::database()->update('custom_language_data')->fields([
        'custom_locale' => $field_custom_locale,
        'custom_luxon' => $field_custom_luxon,
        'custom_plural' => $field_custom_plural,
        'custom_language_name_local' => $custom_language_name_local,
        'created_date' => $current_timestamp,
      ])->condition('langcode', $langcode)
        ->execute();
    }
    else {
      // Insert a new record.
      \Drupal::database()->insert('custom_language_data')->fields([
        'langcode' => $langcode,
        'custom_locale' => $field_custom_locale,
        'custom_luxon' => $field_custom_luxon,
        'custom_plural' => $field_custom_plural,
        'custom_language_name_local' => $custom_language_name_local,
        'created_date' => $current_timestamp,
      ])->execute();
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function language_custom_field_preprocess_node(array &$variables) {
  $node = $variables['node'];
  // Check if the node has a body field and a summary.
  if (!empty($node->body) && !empty($node->body->summary)) {
    // Get the summary from the body field.
    $body_summary = $node->body->summary;
    // Add the summary to the content array.
    $variables['content']['body_summary'] = [
      '#markup' => $body_summary,
      '#allowed_tags' => Xss::getHtmlTagList(),
      '#prefix' => '<div class="node-summary">',
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Implements hook_node_view().
 */
function language_custom_field_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  // Check if the node has a body field and a summary.
  if ($node->hasField('body') && !$node->body->isEmpty()) {
    $body_field = $node->get('body')->getValue();

    if (!empty($body_field[0]['summary'])) {
      // Add the summary to the content array.
      $build['body_summary'] = [
        '#markup' => $body_field[0]['summary'],
        '#allowed_tags' => Xss::getHtmlTagList(),
        '#prefix' => '<div class="node-summary">',
        '#suffix' => '</div>',
      ];

    }

  }

}
